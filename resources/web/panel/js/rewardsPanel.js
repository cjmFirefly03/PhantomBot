/*
 * Copyright (C) 2017 phantombot.tv
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * @author cjmFirefly03
 */

/*
 * rewardsPanel.js
 * Drives the rewards panel
 */
(function() {
    /*
     * onMessage
     * This event is generated by the connection (WebSocket) object.
     */
    function onMessage(message) {
        var msgObject;

        try {
            msgObject = JSON.parse(message.data);
        } catch (ex) {
            return;
        }

        if (panelHasQuery(msgObject)) {
            var rewardsTableData = [],
                rewardsName = "",
                rewardsValues,
                description = "",
                command = "",
                maxRedemptions = "",
                viewerLimit = "",
                cooldown = "",
                cost = "",
                html = "",
                foundData = false;
            if (panelCheckQuery(msgObject, 'rewards_rewards')) {
                html = "<table>";
                for (idx in msgObject['results']) {
                    rewardsName = msgObject['results'][idx]['key'];
                    rewardsValues = JSON.parse(msgObject['results'][idx]['value']);
                    description = rewardsValues.description;
                    command = rewardsValues.command;
                    maxRedemptions = rewardsValues.maxRedemptions;
                    viewerLimit = rewardsValues.viewerLimit;
                    cost = rewardsValues.cost;
                    cooldown = rewardsValues.cooldown;

                    foundData = true;
                    html += '<tr style="textList">' +
                        '    <td style="width: 10%" >' + rewardsName + '</td>' +
                        '    <td style="vertical-align: middle">' +
                        '        <form onkeypress="return event.keyCode != 13">' +
                        '            <input style="width: 95%" type="text" data-toggle="tooltip" title="Click to edit the reward." onclick="$.editReward(\'' + rewardsName + '\', \'' + command + '\', \''+ cost + '\', \'' + description + '\', \''+ cooldown + '\', \'' + maxRedemptions + '\', \''+ viewerLimit + '\')"' +
                        '                       id="editReward_' + command.replace(/[^a-zA-Z0-9_]/g, '_SP_') + '"' +
                        '                   value="' + cost + ' points. (Command: ' + command + ', Cooldown: ' + cooldown + ', Max Redemptions: ' + maxRedemptions + ', Viewer Limit: ' + viewerLimit + ')" />' +
                        '              <button style="float: right;" type="button" class="btn btn-default btn-xs" id="deleteReward_' + command + '" onclick="$.deleteReward(\'' + rewardsName + '\', \''+ command + '\')"><i class="fa fa-trash" /> </button>' +
                        '        </form>' +
                        '    </td>' +
                        '</tr>';
                }
                html += "</table>";

                if (!foundData) {
                    html = "<i>No entries in rewards table.</i>";
                }
                $("#rewardsList").html(html);
            }

            if (panelCheckQuery(msgObject, 'rewards_redemptions')) {
                var redemptions,
                    username;
                html = "<table>";
                for (idx in msgObject['results']) {
                    redemptions = JSON.parse(msgObject['results'][idx]['value']).redemptions;
                    username = msgObject['results'][idx]['key'];

                    redemptions.forEach(function (u, index) {
                        foundData = true;
                        html += '<tr style="textList">' +
                            '    <td style="width: 10%" >' + u.reward + '</td>' +
                            '    <td style="width: 10%" >' + username + '</td>' +
                            '    <td style="width: 10%" >' + new Date(parseInt(u.date)) + '</td>' +
                            '    <td style="width: 10%" >' + u.fulfillment + '</td>' +

                            '    <td style="vertical-align: middle">' +
                            '        <form onkeypress="return event.keyCode != 13">' +
                                        getFulfillmentButton(username, index, u.fulfillment);
                            '        </form>' +
                            '    </td>' +
                            '</tr>';
                    });
                }
                html += "</table>";
                if (!foundData) {
                    html = "<i>No entries in redemptions table.</i>";
                }
                $("#redemptionTable").html(html);
            }
        }
    }

    function getFulfillmentButton(user, id, fulfillment) {
        if (fulfillment === "true") {
            return '<button style="float: right;" type="button" class="btn btn-default btn-xs" id="markUnfulfilled_' + id + user + '" onclick="$.fulfillReward(\'' + user + '\', \''+ id + '\', \''+ false + '\')"><i class="fa fa-circle-o" /> </button>';
        }
        return '<button style="float: right;" type="button" class="btn btn-default btn-xs" id="markFulfilled_' + id + user + '" onclick="$.fulfillReward(\'' + user + '\', \''+ id + '\', \''+ true + '\')"><i class="fa fa-check" /> </button>';
    }

    /**
     * @function doQuery
     */
    function doQuery() {
        sendDBKeys("rewards_rewards", "rewards");
        sendDBKeys("rewards_price", "pricecom");
        sendDBKeys("rewards_redemptions", "redemptions");
        sendDBKeys("rewards_cooldown", "coolddown");
    }

    /**
     * @function sortPointsTable
     * @param {Object} a
     * @param {Object} b
     */
    function sortPointsTable_alpha_asc(a, b) {
        return panelStrcmp(a.key, b.key);
    }

    function setupReward() {
        var name = $("#setupRewardName").val(),
            cost = parseInt($("#setupRewardCost").val()),
            description = $("#setupRewardDescription").val(),
            command = $("#setupRewardCommand").val(),
            cooldown = $("#setupRewardCooldown").val(),
            maxRedemptions = $("#setupRewardMaxRedemptions").val(),
            viewerLimit = $("#setupeRewardViewerLimit").val();

        if (command.length <= 0) {
            command = name;
        }

        if (command.startsWith('!')) {
            command = command.replace('!', '');
        }

        if (command.match(/\s/)) {
            $("#setupRewardCommand").val("Commands cannot have a space");
            setTimeout(function() { $("#setupRewardCommand").val(""); }, TIMEOUT_WAIT_TIME * 3);
            return;
        }

        if (isNaN(cost)) {
            $("#setupRewardCost").val("Cost must be a number");
            setTimeout(function() { $("#setupRewardCost").val(""); }, TIMEOUT_WAIT_TIME * 3);
            return;
        }

        if (name.length > 0 && cost >= 0) {
            if (cooldown.length > 0) {
                sendDBUpdate("rewards_cooldown_add", "cooldown", String(command), JSON.stringify({command: String(command.toLowerCase()), seconds: String(cooldown), isGlobal: String(true)}));
                setTimeout(function() { sendWSEvent('cooldown', './core/commandCoolDown.js', null, ['add', command.toLowerCase(), cooldown, true]); }, TIMEOUT_WAIT_TIME);
            }
            sendDBUpdate("rewards_commandPrice", "pricecom", command.toLowerCase(), cost);
            sendDBUpdate("rewards_rewards", "rewards", name.toLowerCase(), JSON.stringify({description: String(description), cost: String(cost), command: String(command.toLowerCase()), cooldown: String(cooldown), maxRedemptions: String(maxRedemptions), viewerLimit: String(viewerLimit)}));
            sendWSEvent('rewards', './systems/rewardSystem.js', null, ['add', command.toLowerCase(), name, cost, description, cooldown, maxRedemptions, viewerLimit]);
            setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME);
            setTimeout(function() { $("#setupRewardName").val(""); $("#setupRewardCost").val(""); $("#setupRewardDescription").val(""), $("#setupRewardCommand").val(""), $("#setupRewardCooldown").val(""), $("#setupRewardMaxRedemptions").val(""), $("#setupeRewardViewerLimit").val(""); }, 5);

        }
    }

    function fulfillReward(user, id, value) {
        console.log('fulfilling reward' + user + id);
        sendWSEvent('rewards', './systems/rewardSystem.js', null, ['fulfill', user, id, value]);
       setTimeout(function () { doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    function editReward(name, command, cost, description, cooldown, maxRedemptions, viewerLimit) {
        $("#setupRewardName").val(name);
        $("#setupRewardCost").val(cost);
        $("#setupRewardDescription").val(description);
        $("#setupRewardCommand").val(command);
        $("#setupRewardCooldown").val(cooldown);
        $("#setupRewardMaxRedemptions").val(maxRedemptions);
        $("#setupeRewardViewerLimit").val(viewerLimit);
    }

    function deleteReward(name, command) {
        $("#deleteReward_" + name.replace(/[^a-zA-Z0-9_]/g, '_SP_')).html("<i style=\"color: #6136b1\" class=\"fa fa-spinner fa-spin\" />");
        sendDBDelete("rewards_cooldown_delete", "cooldown", command);
        sendDBDelete("rewards_delcomprice_" + command, "pricecom", command);
        sendDBDelete("rewards_delete", "rewards", name);
        sendWSEvent('cooldown', './core/commandCoolDown.js', null, ['remove', command]);
        sendWSEvent('rewards', './systems/rewardSystem.js', null, ['remove', command, name]);
        setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME);
        setTimeout(function() { sendCommand("reloadcommand") }, TIMEOUT_WAIT_TIME);
    }

    function convertToString(obj) {
        //create an array that will later be joined into a string.
        var string = [];

        //is object
        //    Both arrays and objects seem to return "object"
        //    when typeof(obj) is applied to them. So instead
        //    I am checking to see if they have the property
        //    join, which normal objects don't have but
        //    arrays do.

        if (obj == undefined) {
            return String(obj);
        } else if (typeof(obj) == "object" && (obj.join == undefined)) {
            for (prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    string.push(JSON.stringify(prop) + ": " + convertToString(obj[prop]));
                }
            };
            return "{" + string.join(", ") + "}";

            //is array
        } else if (typeof(obj) == "object" && !(obj.join == undefined)) {
            for(prop in obj) {
                string.push(convertToString(obj[prop]));
            }
            return "[" + string.join(", ") + "]";

            //is function
        } else if (typeof(obj) == "function") {
            string.push(obj.toString())

            //all other values can be done with JSON.stringify
        } else {
            string.push(JSON.stringify(obj))
        }

        return string.join(",");
    }

    // Import the HTML file for this panel.
    $("#rewardsPanel").load("/panel/rewards.html");

    // Load the DB items for this panel, wait to ensure that we are connected.
    var interval = setInterval(function() {
        if (isConnected && TABS_INITIALIZED) {
            var active = $("#tabs").tabs("option", "active");
            if (active == 5) {
                doQuery();
                clearInterval(interval);
            }
        }
    }, INITIAL_WAIT_TIME);

    // Query the DB every 30 seconds for updates.
    setInterval(function() {
        var active = $("#tabs").tabs("option", "active");
        if (active == 5 && isConnected && !isInputFocus()) {
            newPanelAlert('Refreshing Rewards Data', 'success', 1000);
            doQuery();
        }
    }, 3e4);

    // Export functions - Needed when calling from HTML.
    $.rewardsOnMessage = onMessage;
    $.rewardsDoQuery = doQuery;
    $.setupReward = setupReward;
    $.editReward = editReward;
    $.fulfillReward = fulfillReward;
    $.setInterval = setInterval;
})();
